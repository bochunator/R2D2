/*********
  Rui Santos
  Complete project details at https://randomnerdtutorials.com/esp8266-nodemcu-access-point-ap-web-server/
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files.
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
*********/
/*********
  Rui Santos
  Complete project details at https://RandomNerdTutorials.com  
*********/
/*
  ModbusRTU ESP8266/ESP32
  Simple slave example
  (c)2019 Alexander Emelianov (a.m.emelianov@gmail.com)
  https://github.com/emelianov/modbus-esp8266
  modified 13 May 2020
  by brainelectronics
  This code is licensed under the BSD New License. See LICENSE.txt for more info.
*/

// Import required libraries
#include <ESP8266WiFi.h>
#include <ESPAsyncWebServer.h>

#include <OneWire.h>
#include <DallasTemperature.h>

#include <ModbusRTU.h>

#define REGN 10               //Start Address
#define SLAVE_ID 1            //Slave Addr
ModbusRTU mb;

const bool DO_YOU_HAVE_SENSORS = false;

const char* ssid     = "ESP8266-Access-Point";
const char* password = "";

// Updates sensors readings every 10 seconds
const long interval = 10000;

// Generally, you should use "unsigned long" for variables that hold time
// The value will quickly become too large for an int to store
unsigned long previousMillis = 0;    // will store last time sensors was updated

// array of current temperature from sensors, updated in loop()
float * sensorsData;

int numberOfSensors;

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

// Data wire is plugged TO GPIO 4
#define ONE_WIRE_BUS 4

// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE_BUS);

// Pass our oneWire reference to Dallas Temperature. 
DallasTemperature sensors(&oneWire);

// We'll use this variable to store a found device address
DeviceAddress tempDeviceAddress; 

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta http-equiv="refresh" content="10">
  <style>
    html {
     font-family: Arial;
     display: inline-block;
     margin: 0px auto;
     text-align: center;
    }
    h2 { font-size: 3.0rem; }
    p { font-size: 3.0rem; }
    .units { font-size: 1.2rem; }
    .sensors-labels{
      font-size: 1.5rem;
      vertical-align:middle;
      padding-bottom: 15px;
    }
  </style>
</head>
<body>
  <h2>ESP8266 sensors Server</h2>
  <p>
    <span class="sensors-labels">Temperature</span> 
    <span id="TEMPERATURE:">%TEMPERATURE%</span>
  </p>
  
)rawliteral";

//const char* sensorEndpoints[] = {"/sensor1", "/sensor2"};//, ..., "/sensor200"}; //tablica endpointów dendpointów dla każdego czujnika
char ** sensorEndpoints;

// Replaces placeholder with sensors values
String processor(const String& var){
  String html = "";
  for (int i = 0; i < numberOfSensors; i++) {
    html += "<p>";
    html += "<span class='sensors-labels'>Sensor " + String(i+1) + ":    </span>";
    html += "<span id='sensor" + String(i) +"'>" + String(sensorsData[i]) + "</span>";
    html += "<sup class='units'>&deg;C</sup>";
    html += "</p>";
  }
  return html;
}

void setup(){

  pinMode(LED_BUILTIN, OUTPUT);
  // Start up the library
  sensors.begin();

  numberOfSensors = sensors.getDeviceCount();
  if(!DO_YOU_HAVE_SENSORS){
    numberOfSensors = 100;
  }
  
  sensorsData = new float [numberOfSensors];

  sensorEndpoints = new char * [numberOfSensors];
  
  for(int i=0; i<numberOfSensors; i++){
    String tmp, ret, bufor = "/sensor";
    int j = i;
    while(0 < j){
        tmp += (char)(j % 10 + '0');
        j /= 10;
    }
     for(int j = tmp.length()-1; j >= 0; j--){
      ret += tmp[j];
     }
     bufor += ret;
    sensorEndpoints[i] = new char [bufor.length()+1];
    for(int j=0; j<bufor.length()+1; j++){
        sensorEndpoints[i][j] = bufor[j];
    }
  }

  Serial.begin(9600, SERIAL_8N1);
#if defined(ESP32) || defined(ESP8266)
  mb.begin(&Serial);
#else
  mb.begin(&Serial);
  //mb.begin(&Serial, RXTX_PIN);  //or use RX/TX direction control pin (if required)
  mb.setBaudrate(9600);
#endif
  mb.slave(SLAVE_ID);
  for(int i = 0; i < numberOfSensors; i++){
    mb.addHreg(REGN + i);
  }

  // Remove the password parameter, if you want the AP (Access Point) to be open
  WiFi.softAP(ssid, password);
  IPAddress IP = WiFi.softAPIP();
  
  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html, processor);
  });

  //dodanie endpointów dla każdego czujnika
  for (int i = 0; i < numberOfSensors; i++) {
    server.on(sensorEndpoints[i], HTTP_GET, [](AsyncWebServerRequest *request){
    String sensorNum = request->url().substring(7);
    request->send_P(200, "text/plain", String(sensorsData[sensorNum.toInt()]).c_str());
    });
  }
  // Start server
  server.begin();
}

void loop(){
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= 1000) {
    digitalWrite(LED_BUILTIN, HIGH);
  }
  if (currentMillis - previousMillis >= interval) {
    // save the last time you updated the sensors values
    digitalWrite(LED_BUILTIN, LOW);
    previousMillis = currentMillis;

    sensors.requestTemperatures(); // Send the command to get temperatures

    // Loop through each device, print out temperature data
    for(int i=0;i<numberOfSensors; i++){
      // Search the wire for address
      if(sensors.getAddress(tempDeviceAddress, i)){
        sensorsData[i] = sensors.getTempC(tempDeviceAddress);
      }
      if(!DO_YOU_HAVE_SENSORS){
        sensorsData[i] = millis()/1000 + i;
      }
    }
  }
  for(int i=0;i<numberOfSensors; i++){
    mb.Hreg(REGN + i, sensorsData[i]);
  }
  mb.task();
  yield();
}
/*

https://randomnerdtutorials.com/esp8266-nodemcu-access-point-ap-web-server/
https://randomnerdtutorials.com/esp8266-ds18b20-temperature-sensor-web-server-with-arduino-ide/
https://github.com/emelianov/modbus-esp8266/blob/master/examples/RTU/slave/slave.ino

*/