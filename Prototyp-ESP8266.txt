#include <ESP8266WiFi.h>
#include <ESPAsyncWebServer.h>

#include <OneWire.h>
#include <DallasTemperature.h>

const char* ssid     = "ESP8266-Access-Point";//maximum of 31 characters
const char* password = "";//minimum of 8 characters. If not specified, the access point will be open (maximum 63 characters)

//Updates readings every 10 seconds
const long interval = 10000;

// current temperature, updated in loop()
float t1 = 0.0;
float t2 = 0.0;
float t3 = 0.0;
float t4 = 0.0;

unsigned long previousMillis = 0;    // will store last time was updated

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);



// Data wire is plugged TO GPIO 4
#define ONE_WIRE_BUS 4

// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE_BUS);

// Pass our oneWire reference to Dallas Temperature. 
DallasTemperature sensors(&oneWire);

// Number of temperature devices found
int numberOfDevices;

// We'll use this variable to store a found device address
DeviceAddress tempDeviceAddress; 

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>

<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    html {
     font-family: Arial;
     display: inline-block;
     margin: 0px auto;
     text-align: center;
    }
    h2 { font-size: 3.0rem; }
    p { font-size: 3.0rem; }
    .units { font-size: 1.2rem; }
    .dht-labels{
      font-size: 1.5rem;
      vertical-align:middle;
      padding-bottom: 15px;
    }
  </style>
</head>

<body>
  <h2>ESP8266 DHT Server</h2>
  <p>
    <span class="dht-labels">Czujnik nr1 </span> 
    <span id="temperature1">%TEMPERATURE1%</span>
    <sup class="units">&deg;C</sup>
  </p>
  <p>
    <span class="dht-labels">Czujnik nr2 </span> 
    <span id="temperature2">%TEMPERATURE2%</span>
    <sup class="units">&deg;C</sup>
  </p>
  <p>
    <span class="dht-labels">Czujnik nr3 </span> 
    <span id="temperature3">%TEMPERATURE3%</span>
    <sup class="units">&deg;C</sup>
  </p>
  <p>
    <span class="dht-labels">Czujnik nr4 </span> 
    <span id="temperature4">%TEMPERATURE4%</span>
    <sup class="units">&deg;C</sup>
  </p>
</body>

<script>
setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("temperature1").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/temperature1", true);
  xhttp.send();
}, 10000 ) ;

setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("temperature2").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/temperature2", true);
  xhttp.send();
}, 10000 ) ;

setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("temperature3").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/temperature3", true);
  xhttp.send();
}, 10000 ) ;

setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("temperature4").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/temperature4", true);
  xhttp.send();
}, 10000 ) ;
</script>

</html>)rawliteral";




String processor(const String& var){
  //Serial.println(var);
  if(var == "TEMPERATURE1"){
    return String(t1);
  }else if(var == "TEMPERATURE2"){
    return String(t2);
  }else if(var == "TEMPERATURE3"){
    return String(t3);
  }else if(var == "TEMPERATURE4"){
    return String(t4);
  }
  return String();
}

void setup() {
  // put your setup code here, to run once:
  pinMode(LED_BUILTIN, OUTPUT);//dioda wbudowana
  Serial.begin(115200);// start serial port
  sensors.begin();// Start up the library
  numberOfDevices = sensors.getDeviceCount();// Grab a count of devices on the wire
  // locate devices on the bus
  Serial.print("Locating devices...");
  Serial.print("Found ");
  Serial.print(numberOfDevices, DEC);
  Serial.println(" devices.");
  // Loop through each device, print out address
  for(int i=0;i<numberOfDevices; i++){
    // Search the wire for address
    if(sensors.getAddress(tempDeviceAddress, i)){
      Serial.print("Found device ");
      Serial.print(i, DEC);
      Serial.print(" with address: ");
      printAddress(tempDeviceAddress);
      Serial.println();
    } else {
      Serial.print("Found ghost device at ");
      Serial.print(i, DEC);
      Serial.print(" but could not detect address. Check power and cabling");
    }
  }
  //WiFi.softAP(ssid, password);//set the ESP8266 as an access point, by default, the access point IP address is 192.168.4.1
  WiFi.softAP(ssid, password, 1, 0, 8);//max simultaneous connected stations = 8 (default 4)
  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html, processor);
  });
  server.on("/temperature1", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", String(t1).c_str());
  });
  server.on("/temperature2", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", String(t2).c_str());
  });
  server.on("/temperature3", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", String(t3).c_str());
  });
  server.on("/temperature4", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", String(t4).c_str());
  });
  server.begin();
}

void loop() {
  // put your main code here, to run repeatedly:
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= 1000) {
    digitalWrite(LED_BUILTIN, HIGH);
  }
  if (currentMillis - previousMillis >= interval) {
    Serial.println();
    Serial.print("Liczba sekund = ");
    Serial.println(millis()/1000);
    digitalWrite(LED_BUILTIN, LOW);
    sensors.requestTemperatures(); // Send the command to get temperatures
    // Loop through each device, print out temperature data
    for(int i=0;i<numberOfDevices; i++){
    // Search the wire for address
      if(sensors.getAddress(tempDeviceAddress, i)){
        // Output the device ID
        Serial.print("Temperature for device: ");
        Serial.println(i+1,DEC);
        // Print the data
        float tempC = sensors.getTempC(tempDeviceAddress);
        Serial.print("Temp C: ");
        Serial.print(tempC);
        Serial.print(" Temp F: ");
        Serial.println(DallasTemperature::toFahrenheit(tempC)); // Converts tempC to Fahrenheit
        i+1 != 1 ? : t1 = tempC;
        i+1 != 2 ? : t2 = tempC;
        i+1 != 3 ? : t3 = tempC;
        i+1 != 4 ? : t4 = tempC;
      }
    }
    // save the last time you updated the DHT values
    previousMillis = currentMillis;
  }
}

// function to print a device address
void printAddress(DeviceAddress deviceAddress) {
  for (uint8_t i = 0; i < 8; i++){
    if (deviceAddress[i] < 16) Serial.print("0");
      Serial.print(deviceAddress[i], HEX);
  }
}
//https://randomnerdtutorials.com/esp8266-nodemcu-access-point-ap-web-server/
//https://randomnerdtutorials.com/esp8266-ds18b20-temperature-sensor-web-server-with-arduino-ide/